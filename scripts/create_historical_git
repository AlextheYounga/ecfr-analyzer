#!/bin/bash
source .env

version=$1
working_folder=$2
historical_folder=$3

# Data folders
historical_xml="$historical_folder/xml"
historical_struct_folder="$historical_folder/structure"
xml_folder="$working_folder/xml"
struct_folder="$working_folder/structure"
cfr_output="$GIT_REPO/cfr"

subroutine="nested"

function process_version_files() {
	title=$1

	# Get file from drive
	input_file="$historical_xml/title-$title/title-$title-$version.xml.zip"
	structure_file="$historical_struct_folder/title-$title/title-$title-$version-structure.json.zip"

	function unzip_version_files() {
		# Unzip files
		unzip -oq "$xml_folder/title-$title-$version.xml.zip" -d "$xml_folder/"
		unzip -oq "$struct_folder/title-$title-$version-structure.json.zip" -d "$struct_folder/"
		# Rename files
		mv "$xml_folder/title-$title-$version.xml" "$xml_folder/title-$title.xml"
		mv "$struct_folder/title-$title-$version-structure.json" "$struct_folder/title-$title-structure.json"
		# Remove zip files
		find $working_folder -type f -name "*.zip" -delete
	}

	if [ -f "$input_file" ] && [ -f "$structure_file" ]; then
		# Copy files to working folder
		cp "$input_file" "$xml_folder/"
		cp "$structure_file" "$struct_folder/"

		unzip_version_files
	fi
}

function get_version_changes() {
	sql="SELECT t.name AS title_name, t.number AS title_number, COUNT(v.id) AS section_count
		FROM versions v
		JOIN titles t ON t.id = v.title_id
		WHERE v.issue_date = '$1'
		GROUP BY t.name;"

	local result=$(sqlite3 -separator "|" database/database.sqlite "$sql")
	echo "$result"
}

function create_git_description() {
	changes=$(get_version_changes $1)
	IFS=$'\n'
	local description=""
	for change in $changes; do
		IFS="|"
		read -r title_name title_number section_count <<<"$change"
		line="Title: $title_number: $title_name - Sections changed: $section_count"
		description="$description\n$line"
	done
	unset IFS

	echo -e $description
}

function run_git_commands() {
	commit_msg="release(cfr): $version issue"
	description=$(create_git_description $version)

	cd $GIT_REPO

	echo "Adding files to git..."
	git add .

	echo "Committing files to git..."
	git commit --quiet -F- <<EOF
$commit_msg

$description
EOF

	git diff HEAD^ --shortstat

	cd - >/dev/null
}

function run_rust_parser() {
	echo "Running Rust parser"
	RUST_BACKTRACE=1 ./rust/target/release/title_markdown_parser $subroutine $struct_folder $xml_folder $cfr_output
}

# Main loop
function main() {
	# Get all versions from db
	titles=$(sqlite3 database/database.sqlite "SELECT number FROM titles WHERE reserved = false;")

	echo "Processing version $version"
	for title in $titles; do
		process_version_files $title
	done
	unset IFS

	echo "Run Rust parser"
	run_rust_parser
	run_git_commands

	i=$((i + 1))
	
	echo -e "Done\n"
}

main